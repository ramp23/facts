{{- if .Values.cronJobs -}}
{{- $general := $.Values.cronJobsGeneral -}}
{{- $cronJobs := list -}}
{{- if kindIs "string" .Values.cronJobs -}}
{{- $cronJobs = fromYaml .Values.cronJobs -}}
{{- else if kindIs "map" .Values.cronJobs -}}
{{- $cronJobs = .Values.cronJobs -}}
{{- end -}}
{{- range $name, $job := $cronJobs }}
{{- $cjName := include "helpers.app.fullname" (dict "name" $name "context" $) }}
---
apiVersion: {{ include "helpers.capabilities.cronJob.apiVersion" $ }}
kind: CronJob
metadata:
  name: {{ $cjName }}
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    {{- include "helpers.app.labels" $ | nindent 4 }}
    {{- with $general.labels }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 4 }}{{- end }}
    {{- with .labels }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 4 }}{{- end }}
  annotations:
    {{- include "helpers.app.genericAnnotations" $ | indent 4 }}
    {{- with $general.annotations }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 4 }}{{- end }}
    {{- with .annotations }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 4 }}{{- end }}
spec:
  schedule: {{ include "helpers.tplvalues.render" (dict "value" .schedule "context" $) | quote }}
  {{- if .singleOnly }}
  concurrencyPolicy: Forbid
  {{- end }}
  {{- if .startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ .startingDeadlineSeconds }}
  {{- else if $general.startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ $general.startingDeadlineSeconds }}
  {{- end }}
  {{- if .successfulJobsHistoryLimit }}
  successfulJobsHistoryLimit: {{ .successfulJobsHistoryLimit }}
  {{- else if $general.successfulJobsHistoryLimit }}
  successfulJobsHistoryLimit: {{ $general.successfulJobsHistoryLimit }}
  {{- end }}
  {{- if .failedJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .failedJobsHistoryLimit }}
  {{- else if $general.failedJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ $general.failedJobsHistoryLimit }}
  {{- end }}
  jobTemplate:
    spec:
      {{- if .parallelism }}
      parallelism: {{ .parallelism }}
      {{- else if $general.parallelism }}
      parallelism: {{ $general.parallelism }}
      {{- end }}
      {{- if .completions }}
      completions: {{ .completions }}
      {{- else if $general.completions }}
      completions: {{ $general.completions }}
      {{- end }}
      {{- if .activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ .activeDeadlineSeconds }}
      {{- else if $general.activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ $general.activeDeadlineSeconds }}
      {{- end }}
      {{- if .backoffLimit }}
      backoffLimit: {{ .backoffLimit }}
      {{- else if $general.backoffLimit }}
      backoffLimit: {{ $general.backoffLimit }}
      {{- end }}
      {{- if .ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ .ttlSecondsAfterFinished }}
      {{- else if $general.ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ $general.ttlSecondsAfterFinished }}
      {{- end }}
      template:
        metadata:
          labels:
            {{- with $.Values.generic.podLabels }}{{- include "helpers.tplvalues.render" ( dict "value" . "context" $ ) | nindent 12 }}{{- end }}
            {{- with .podLabels }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 12 }}{{- end }}
          annotations:
            {{- with $.Values.generic.podAnnotations }}{{- include "helpers.tplvalues.render" ( dict "value" . "context" $ ) | nindent 12 }}{{- end }}
            {{- with .podAnnotations }}{{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 12 }}{{- end }}
        spec:
          {{- if .serviceAccountName }}
          serviceAccountName: {{ .serviceAccountName }}
          {{- else if $.Values.generic.serviceAccountName }}
          serviceAccountName: {{ $.Values.generic.serviceAccountName }}
          {{- end }}
          {{- if .hostAliases }}
          hostAliases: {{- include "helpers.tplvalues.render" (dict "value" .hostAliases "context" $) | nindent 12 }}
          {{- else if $.Values.generic.hostAliases }}
          hostAliases: {{- include "helpers.tplvalues.render" (dict "value" $.Values.generic.hostAliases "context" $) | nindent 12 }}
          {{- end }}
          {{- if .affinity }}
          affinity: {{- include "helpers.tplvalues.render" ( dict "value" .affinity "context" $) | nindent 12 }}
          {{- else if $general.affinity }}
          affinity: {{- include "helpers.tplvalues.render" ( dict "value" $general.affinity "context" $) | nindent 12 }}
          {{- else }}
          affinity:
            nodeAffinity: {{- include "helpers.affinities.nodes" (dict "type" $.Values.nodeAffinityPreset.type "key" $.Values.nodeAffinityPreset.key "values" $.Values.nodeAffinityPreset.values) | nindent 14 }}
            podAffinity: {{- include "helpers.affinities.pods" (dict "type" $.Values.podAffinityPreset "context" $) | nindent 14 }}
            podAntiAffinity: {{- include "helpers.affinities.pods" (dict "type" $.Values.podAntiAffinityPreset "context" $) | nindent 14 }}
          {{- end }}
          {{- with .securityContext }}
          securityContext: {{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 12 }}
          {{- end }}
          {{- if .dnsPolicy }}
          dnsPolicy: {{ .dnsPolicy }}
          {{- else if $.Values.generic.dnsPolicy }}
          dnsPolicy: {{ $.Values.generic.dnsPolicy }}
          {{- end }}
          {{- with .nodeSelector }}
          nodeSelector: {{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 12 }}
          {{- end }}
          {{- with .tolerations }}
          tolerations: {{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 12 }}
          {{- end }}
          {{ if or $.Values.imagePullSecrets $.Values.generic.extraImagePullSecrets .extraImagePullSecrets .imagePullSecrets }}
          imagePullSecrets:
          {{- range $sName, $v := $.Values.imagePullSecrets }}
          - name: {{ $sName }}
          {{- end }}
          {{- with .imagePullSecrets }}{{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 10 }}{{- end }}
          {{- with .extraImagePullSecrets }}{{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 10 }}{{- end }}
          {{- with $.Values.generic.extraImagePullSecrets }}{{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 10 }}{{- end }}
          {{- end }}
          {{- with .initContainers}}
          initContainers:
          {{- range . }}
          - name: {{ .name | default $cjName }}
            {{- $image := $.Values.defaultImage }}{{ with .image }}{{ $image = include "helpers.tplvalues.render" ( dict "value" . "context" $) }}{{ end }}
            {{- $imageTag := $.Values.defaultImageTag }}{{ with .imageTag }}{{ $imageTag = include "helpers.tplvalues.render" ( dict "value" . "context" $) }}{{ end }}
            image: {{ $image }}:{{ $imageTag }}
            imagePullPolicy: {{ .imagePullPolicy | default $.Values.defaultImagePullPolicy }}
            {{- with .securityContext }}
            securityContext: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- if $.Values.diagnosticMode.enabled }}
            args: {{- include "helpers.tplvalues.render" ( dict "value" $.Values.diagnosticMode.args "context" $) | nindent 12 }}
            {{- else if and .args (not $job.commandMaxDuration) }}
            args: {{- include "helpers.tplvalues.render" ( dict "value" .args "context" $) | nindent 12 }}
            {{- end }}
            {{- if $.Values.diagnosticMode.enabled }}
            command: {{- include "helpers.tplvalues.render" ( dict "value" $.Values.diagnosticMode.command "context" $) | nindent 12 }}
            {{- else if .command }}
            {{- if $job.commandMaxDuration }}
            command: ["/bin/bash"]
            args: ["-c", "/usr/bin/timeout --preserve-status {{ $job.commandMaxDuration }} {{ .command }}; exit_status=$?; if [[ $exit_status -eq 143 ]]; then echo 'Max execution exceeded after {{ $job.commandMaxDuration }} seconds!'; fi; exit $exit_status"]
            {{- else if typeIs "string" .command }}
            command: {{ printf "[\"%s\"]" (join ("\", \"") (without (splitList " " .command ) "" )) }}
            {{- else -}}
            command: {{- include "helpers.tplvalues.render" ( dict "value" .command "context" $) | nindent 12 }}
            {{- end }}
            {{- end }}
            {{- include "helpers.workloads.envs" (dict "value" . "context" $) | indent 12 }}
            {{- include "helpers.workloads.envsFrom" (dict "value" . "context" $) | indent 12 }}
            {{- with .ports }}
            ports: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 12 }}
            {{- end }}
            {{- with .lifecycle }}
            lifecycle: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 12 }}
            {{- end }}
            {{- with .livenessProbe }}
            livenessProbe: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .readinessProbe }}
            readinessProbe: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .resources }}
            resources: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            volumeMounts: {{- include "helpers.volumes.renderVolumeMounts" (dict "value" . "general" $general "context" $) | nindent 12 }}
          {{- end }}{{- end }}
          {{- $containers := list -}}
          {{- if .containers -}}{{- $containers = .containers -}}{{- else -}}{{- $containers = append list . -}}{{- end }}
          containers:
          {{- range $containers }}
          - name: {{ .name | default $cjName }}
            {{- $image := $.Values.defaultImage }}{{ with .image }}{{ $image = include "helpers.tplvalues.render" ( dict "value" . "context" $) }}{{ end }}
            {{- $imageTag := $.Values.defaultImageTag }}{{ with .imageTag }}{{ $imageTag = include "helpers.tplvalues.render" ( dict "value" . "context" $) }}{{ end }}
            image: {{ $image }}:{{ $imageTag }}
            imagePullPolicy: {{ .imagePullPolicy | default $.Values.defaultImagePullPolicy }}
            {{- with .securityContext }}
            securityContext: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- if $.Values.diagnosticMode.enabled }}
            args: {{- include "helpers.tplvalues.render" ( dict "value" $.Values.diagnosticMode.args "context" $) | nindent 12 }}
            {{- else if and .args (not $job.commandMaxDuration) }}
            args: {{- include "helpers.tplvalues.render" ( dict "value" .args "context" $) | nindent 12 }}
            {{- end }}
            {{- if $.Values.diagnosticMode.enabled }}
            command: {{- include "helpers.tplvalues.render" ( dict "value" $.Values.diagnosticMode.command "context" $) | nindent 12 }}
            {{- else if .command }}
            {{- if $job.commandMaxDuration }}
            command: ["/bin/bash"]
            args: ["-c", "/usr/bin/timeout --preserve-status {{ $job.commandMaxDuration }} {{ .command }}; exit_status=$?; if [[ $exit_status -eq 143 ]]; then echo 'Max execution exceeded after {{ $job.commandMaxDuration }} seconds!'; fi; exit $exit_status"]
            {{- else if typeIs "string" .command }}
            command: {{ printf "[\"%s\"]" (join ("\", \"") (without (splitList " " .command ) "" )) }}
            {{- else -}}
            command: {{- include "helpers.tplvalues.render" ( dict "value" .command "context" $) | nindent 12 }}
            {{- end }}
            {{- end }}
            {{- include "helpers.workloads.envs" (dict "value" . "context" $) | indent 12 }}
            {{- include "helpers.workloads.envsFrom" (dict "value" . "context" $) | indent 12 }}
            {{- with .ports }}
            ports: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 12 }}
            {{- end }}
            {{- with .lifecycle }}
            lifecycle: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 12 }}
            {{- end }}
            {{- with .livenessProbe }}
            livenessProbe: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .readinessProbe }}
            readinessProbe: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            {{- with .resources }}
            resources: {{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 14 }}
            {{- end }}
            volumeMounts: {{- include "helpers.volumes.renderVolumeMounts" (dict "value" . "general" $general "context" $) | nindent 12 }}
          {{- end }}
          volumes: {{- include "helpers.volumes.renderVolume" (dict "value" . "general" $general "context" $) | indent 10}}
          restartPolicy: {{ .restartPolicy | default "Never" }}
{{- if .commandDurationAlert }}
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: cronjob-{{ $cjName }}
  labels:
    prometheus: k8s
    role: alert-rules
  namespace: nxs-monitoring
spec:
  groups:
  - name: "cronJobs_rules"
    interval: 1m # period check for alerts
    rules:
    - alert: "cronjob-{{ $cjName }}-too-long-execution"
      expr: '((time() - kube_job_status_start_time{namespace="{{ $.Release.Namespace }}", job_name=~"{{ $cjName }}-.*"}) and kube_job_status_active{namespace="{{ $.Release.Namespace }}", job_name=~"{{ $cjName }}-.*"} == 1) > {{ .commandDurationAlert }}'
      for: 3m
      labels:
        severity: warning
      annotations:
        message: "CronJob {{ $.Release.Namespace }}/{{ $cjName }} is taking more than {{ .commandDurationAlert }} to complete"
{{- end }}
{{- end }}
{{- end }}
